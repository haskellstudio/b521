#lang racket
(require C311/mk)
(provide (all-defined-out))

(define apply-Go
  (lambda (G e t)
    (fresh (a G^)
      (== `(,a . ,G^) G)
      (fresh (aa da)
        (== `(,aa . ,da) a)
        (conde
          ((== aa e) (== da t))
          ((=/= aa e) (apply-Go G^ e t)))))))

(define !-
  (lambda (G e t)
    (conde
      ((numbero e) (== 'Nat t))
      ((== t 'Bool)
       (conde
         ((== #t e))
         ((== #f e))))
      ((fresh (e1 e2 t1 t2)
         (== `(cons ,e1 ,e2) e)
         (== t `(pairof ,t1 ,t2))
         (!- G e1 t1)
         (!- G e2 t2)))
      ((fresh (pe at dt)
         (== `(car ,pe) e)
         (== t at)
         (!- G pe `(pairof ,at ,dt))))
      ((fresh (pe at dt)
         (== `(cdr ,pe) e)
         (== t dt)
         (!- G pe `(pairof ,at ,dt))))
      ((fresh (ne1 ne2)
         (== `(+ ,ne1 ,ne2) e)
         (== 'Nat t)
         (!- G ne1 'Nat)
         (!- G ne2 'Nat)))
      ((fresh (ne1 ne2)
         (== `(* ,ne1 ,ne2) e)
         (== 'Nat t)
         (!- G ne1 'Nat)
         (!- G ne2 'Nat)))
      ((fresh (ne)
         (== `(sub1 ,ne) e)
         (== 'Nat t)
         (!- G ne 'Nat)))
      ((fresh (ne)
         (== `(zero? ,ne) e)
         (== 'Bool t)
         (!- G ne 'Nat)))
      ((fresh (be)
         (== `(not ,be) e)
         (== 'Bool t)
         (!- G be 'Bool)))
      ((fresh (teste anse elsee)
        (== `(if ,teste ,anse ,elsee) e)
        (!- G teste 'Bool)
        (!- G anse t)
        (!- G elsee t)))
      ((symbolo e) (apply-Go G e t))
      ((fresh (x b)
        (== `(lambda (,x) ,b) e)
        (symbolo x)
        (fresh (tx tb)          
          (== `(,tx -> ,tb) t)
          (!- `((,x . ,tx) . ,G) b tb))))
      ((fresh (var val b lt bt)
         (== `(let ((,var ,val)) ,b) e)
         (!- G val lt)
         (== lt t)
         (!- `((,var . ,lt). ,G) b bt)))
      ((fresh (fe a)
         (== `(fix ,fe) e)
         (== t a)
         (!- G fe `(,a -> ,a))))
      ((fresh (e1 arg)
        (== `(,e1 ,arg) e)
        (fresh (targ)
          (!- G e1 `(,targ -> ,t))
          (!- G arg targ)))))))
